#!/bin/bash

# ~/.bash_profile.local is sourced by ~/.bash_profile for private data.
# This shell file will be .gitignored by default and thus will not be backed
# up into by git if committed to a repository.

# Change `GIT_AUTHOR_NAME` and `GIT_AUTHOR_EMAIL` to your own git acount.
# If you are using GPP, copy your keys into ~/.gpupg, change the
# `GIT_AUTHOR_GPG_KEY` and uncomment the gpupg code below.

# Load on a new machine via:

# $ curl -L https://gist.github.com/ChristopherA/503b172a5fcae5410492/raw/.bash_profile.local > ~/.bash_profile.local; atom ~/.bash_profile.local

# I personally use my personalized copy of this file as a github gist, which I
# can quickly curl into a new home directory.

# Script Debugger

#SCRIPT_DEBUG=true
#SCRIPT_DEBUG=false

# Git credentials - not under version control to prevent people from
# accidentally committing with these details
GIT_AUTHOR_NAME="FIRSTNAME LASTNAME"
GIT_AUTHOR_EMAIL="USERNAME@COMPANY.COM"
GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"

# Set the credentials (modifies ~/.gitconfig)
git config --global user.name "$GIT_AUTHOR_NAME"
git config --global user.email "$GIT_AUTHOR_EMAIL"
git config --global user.mail "$GIT_AUTHOR_EMAIL"
git config --global credential.helper osxkeychain

# GPGsign
# If you wish all commits to be signed, intall GPG and keys, and uncomment
# the following 3 lines:

#GIT_AUTHOR_GPG_KEY="12345678"
#git config --global user.signingKey "$GIT_AUTHOR_GPG_KEY"
#git config --global commit.gpgsign true

# All local bash interface specific functionality has been executed

if $SCRIPT_DEBUG; then echo "...~/.bash_profile.local executed."; fi
